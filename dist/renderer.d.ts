declare const WS_URL = "ws://localhost:8000/ws ";
declare const statusEl: HTMLDivElement;
declare const commandInput: HTMLInputElement;
declare const sendBtn: HTMLButtonElement;
declare const clearBtn: HTMLButtonElement;
declare const terminalEl: HTMLDivElement;
declare const planListEl: HTMLUListElement;
declare const promptPathEl: HTMLSpanElement;
declare const sidebarToggle: HTMLButtonElement;
declare const sidebar: HTMLDivElement;
declare const closeBtn: Element | null;
declare const minBtn: Element | null;
declare const maxBtn: Element | null;
declare const settingsBtn: HTMLButtonElement;
declare const settingsModal: HTMLDivElement;
declare const closeSettings: HTMLButtonElement;
declare const themeSelect: HTMLSelectElement;
declare const fontSizeSlider: HTMLInputElement;
declare const fontSizeValue: HTMLSpanElement;
declare const transparencySlider: HTMLInputElement;
declare const transparencyValue: HTMLSpanElement;
declare let socket: WebSocket | null;
declare let currentRequestId: string | null;
declare let currentExecutingStepId: string | null;
declare let currentDir: string;
declare const pendingExecutions: Map<string, HTMLLIElement>;
declare const stepPanels: Map<string, Map<string, HTMLElement>>;
declare let planningSpinnerEl: HTMLElement | null;
declare let summarySpinnerEl: HTMLElement | null;
declare function lockSend(lock: boolean): void;
declare function updatePrompt(): void;
declare function appendLine(kind: string, text: string, codeBlock?: string): void;
declare const startpanel: HTMLDivElement;
declare const start_body: HTMLDivElement;
declare function typewriterPanel(kind: string, text: string, delay?: number): Promise<HTMLElement>;
declare function tryParseJSON(s: string): any | null;
declare function getRunCommandFn(): ((cmd: string) => Promise<string>) | null;
declare const runLocalCommand: (cmd: string) => Promise<string>;
declare function makeSpinner(text: string): HTMLElement;
declare function completeSpinner(sp: HTMLElement | null, doneText?: string): void;
declare function makeCollapsible(title: string, code?: string): {
    root: HTMLElement;
    body: HTMLElement;
};
declare function getOrCreateStepPanel(requestId: string, stepId: string, description?: string): HTMLElement;
declare function setStepStatus(requestId: string, stepId: string, status: "pending" | "running" | "success" | "failed"): void;
declare function showStartupInfo(): Promise<void>;
declare function connectWs(url?: string): void;
declare function loadSettings(): void;
declare const connectBtn: HTMLButtonElement;
declare const w: any;
//# sourceMappingURL=renderer.d.ts.map